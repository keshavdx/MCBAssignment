Step 1. Create the "XXBCM_ORDER_MGT" table using the script - DB_Prequisite.sql

Use the provided DB_Prequisite.sql script to create the XXBCM_ORDER_MGT table and populate it with sample data.  

       CREATE TABLE Supplier (
    Supplier_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Supplier_Name VARCHAR2(255) NOT NULL,
    Contact_Name VARCHAR2(255),
    Address VARCHAR2(500),
    Contact_Number VARCHAR2(15),
    Email VARCHAR2(255)
);

CREATE TABLE Ordertbl (
    Order_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Order_Ref VARCHAR2(50) NOT NULL UNIQUE,
    Supplier_ID NUMBER,
    Order_Date DATE,
    Order_Total_Amount NUMBER(10, 2),
    Order_Description VARCHAR2(500),
    Order_Status VARCHAR2(50),
    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)
);
CREATE TABLE Invoicetbl (
    Invoice_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Order_ID NUMBER,
    Invoice_Reference VARCHAR2(50),
    Invoice_Date DATE,
    Invoice_Status VARCHAR2(50),
    Invoice_Hold_Reason VARCHAR2(255),
    Invoice_Amount NUMBER(10, 2),
    Invoice_Description VARCHAR2(500),
    FOREIGN KEY (Order_ID) REFERENCES Ordertbl(Order_ID)
);

CREATE TABLE Order_Items (
    Order_Item_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Order_ID NUMBER,
orderline_desc varchar2(200),
    orderLine_Amount NUMBER(10, 2),
    FOREIGN KEY (Order_ID) REFERENCES Ordertbl(Order_ID)
);




Step 2. Implement a Database Schema
To normalize the XXBCM_ORDER_MGT table and design an appropriate database schema, we will create the following normalized tables:

Suppliers: Contains supplier information.
Orders: Contains order-related information.
Invoices: Contains invoice details related to orders.
Order_Items: Contains individual line items for each order.
These tables will have relationships and constraints such as primary keys and foreign keys to ensure data integrity.

Schema Design
Suppliers Table


CREATE TABLE SUPPLIER (
    Supplier_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Supplier_Name VARCHAR2(255) NOT NULL,
    Contact_Name VARCHAR2(255),
    Address VARCHAR2(500),
    Contact_Number VARCHAR2(25),
    Email VARCHAR2(255)
);
 Orders Table



CREATE TABLE ORDERTBL(
    Order_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Order_Ref VARCHAR2(50) NOT NULL UNIQUE,
    Supplier_ID NUMBER,
    Order_Date DATE,
    Order_Total_Amount NUMBER(10, 2),
    Order_Description VARCHAR2(500),
    Order_Status VARCHAR2(50),
    FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)
);

 Invoices Table


CREATE TABLE INVOICETBL (
    Invoice_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Order_ID NUMBER,
    Invoice_Reference VARCHAR2(50),
    Invoice_Date DATE,
    Invoice_Status VARCHAR2(50),
    Invoice_Hold_Reason VARCHAR2(255),
    Invoice_Amount NUMBER(10, 2),
    Invoice_Description VARCHAR2(500),
    FOREIGN KEY (Order_ID) REFERENCES Ordertbl(Order_ID)
);
 Order_Items Table


CREATE TABLE Order_Items (
    Order_Item_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Order_ID NUMBER,
    orderline_desc varchar2(200),
    orderLine_Amount NUMBER(10, 2),
    ORDER_STATUS VARCHAR2(20),
    FOREIGN KEY (Order_ID) REFERENCES Ordertbl(Order_ID)
);


Step 3. PL/SQL Package for Migration

CREATE OR REPLACE PACKAGE BODY OrderMig AS
    PROCEDURE MigrateData IS
    BEGIN
        -- Migrate Supplier Data
        INSERT INTO Supplier (Supplier_Name, Contact_Name, Address, Contact_Number, Email)
         SELECT DISTINCT 
            INITCAP(SUPPLIER_NAME)SUPPLIER_NAME,
            INITCAP(SUPP_CONTACT_NAME),
            SUPP_ADDRESS,
            SUPP_CONTACT_NUMBER,
            SUPP_EMAIL
        FROM XXBCM_ORDER_MGT where  instr(order_ref,'-')=0 ORDER BY SUPPLIER_NAME;

        -- Migrate Ordertbl Data
        INSERT INTO Ordertbl (Order_Ref, Supplier_ID, Order_Date, Order_Total_Amount, Order_Description, Order_Status)
        SELECT DISTINCT 
            ORDER_REF,
            (SELECT distinct Supplier_ID FROM Supplier b WHERE b.Supplier_Name = INITCAP(a.SUPPLIER_NAME)) Supplier_ID ,
            to_char(to_date(order_date,'dd-mm-yyyy'),'dd-mon-yyyy'),
            ORDER_TOTAL_AMOUNT,
            ORDER_DESCRIPTION,
            ORDER_STATUS
        FROM XXBCM_ORDER_MGT a where  instr(order_ref,'-')=0 ORDER BY ORDER_REF;

INSERT INTO Invoicetbl (Order_ID, Invoice_Reference, Invoice_Date, Invoice_Status, Invoice_Hold_Reason, Invoice_Amount, Invoice_Description)
        SELECT 
          (select order_id from ordertbl b where  SUBSTR(a.ORDER_REF,1, instr(a.order_ref,'-')-1) = b.order_ref),
            INVOICE_REFERENCE,
            to_char(to_date(INVOICE_date,'dd-mm-yyyy'),'dd-mon-yyyy'),
            INVOICE_STATUS,
            INVOICE_HOLD_REASON,
            TO_NUMBER(REPLACE(INVOICE_AMOUNT, ',', '')),
            INVOICE_DESCRIPTION
        FROM XXBCM_ORDER_MGT a where  instr(order_ref,'-')<>0 order by INVOICE_REFERENCE;

        -- Migrate Order Items Data
INSERT INTO Order_Items (Order_ID, orderLine_Amount,orderline_desc , order_status)
        SELECT 
            (select order_id from ordertbl b where  SUBSTR(a.ORDER_REF,1, instr(a.order_ref,'-')-1) = b.order_ref),
            order_Line_Amount,
            order_DESCRIPTION, 
            ORDER_STATUS

        FROM XXBCM_ORDER_MGT a where  instr(order_ref,'-')<>0;

        COMMIT;
    END MigrateData;
END OrderMig;
/

exec OrderMig.MigrateData;

This package includes a procedure MigrateData that performs the migration from the denormalized XXBCM_ORDER_MGT table to the normalized schema. It handles inserting data into Suppliers, Orders, Invoices, and Order_Items.

Step 4: Report Summary of Orders and Invoices

SQL Stored Procedure for Order and Invoice Summary

CREATE OR REPLACE PROCEDURE GetOrderInvoiceSummary (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
SELECT 
        o.ORDER_ID AS Order_Reference, o.order_date,
        TO_CHAR(o.Order_Date, 'MON-YY') AS Order_Period, 
        s.Supplier_Name AS Supplier_Name, -- First letter uppercase
        TO_CHAR(o.Order_Total_Amount, '999,999,990.00') AS Order_Total_Amount, -- Format with commas
        o.Order_Status,
        i.Invoice_Reference,
       (TO_CHAR(sum(Invoice_Amount), '999,999,990.00')) AS Invoice_Total_Amount,
        CASE 
            WHEN SUM(CASE WHEN Invoice_Status = 'Pending' THEN 1 ELSE 0 END) > 0 THEN 'To follow up'
            WHEN SUM(CASE WHEN Invoice_Status IS NULL THEN 1 ELSE 0 END) > 0 THEN 'To verify'
            ELSE 'OK'
        END AS Action
    FROM Supplier s
    JOIN ordertbl o on o.Supplier_ID = s.Supplier_ID
    JOIN Invoicetbl i ON o.Order_ID = i.Order_ID

    
    GROUP BY o.Order_ID, o.order_date, TO_CHAR(o.Order_Date, 'MON-YY'), s.Supplier_Name, TO_CHAR(o.Order_Total_Amount, '999,999,990.00'), o.Order_Status, i.Invoice_Reference
    ORDER BY  o.order_date DESC;
END GetOrderInvoiceSummary;
/

VARIABLE p_cursor REFCURSOR;

-- Execute the procedure
BEGIN
    GetOrderInvoiceSummary(:p_cursor);
END;
/

-- Fetch the results from the cursor
PRINT p_cursor;




Step 5: Return Details for the Third Highest Order Total Amount
This step requires a stored procedure or function to return details of the third-highest order by total amount, formatted as specified.

SQL Stored Procedure for Third Highest Order Total Amount

CREATE OR REPLACE PROCEDURE GetThirdHighestOrder (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
        SELECT o.order_ref,
        o.ORDER_ID AS Order_Reference, 
        TO_CHAR(o.Order_Date, 'Month DD, YYYY') AS Order_Date, -- Format as "January 01, 2017"
        UPPER(s.Supplier_Name) AS Supplier_Name, -- Uppercase
        TO_CHAR(o.Order_Total_Amount, '999,999,990.00') AS Order_Total_Amount, -- Format with commas
        o.Order_Status,
        LISTAGG(distinct Invoice_Reference, ', ') WITHIN GROUP (ORDER BY Invoice_Reference) AS Invoice_References
    
    FROM Supplier s
    JOIN ordertbl o on o.Supplier_ID = s.Supplier_ID
    JOIN Invoicetbl i ON o.Order_ID = i.Order_ID

    GROUP BY o.order_ref,o.ORDER_ID,  TO_CHAR(o.Order_Date, 'Month DD, YYYY'), UPPER(s.Supplier_Name), TO_CHAR(o.Order_Total_Amount, '999,999,990.00'), o.Order_Status
    order by Order_Total_Amount desc OFFSET 2 ROWS
FETCH NEXT 1 ROWS ONLY;


END GetThirdHighestOrder;
/


Step 6: List All Suppliers with Their Respective Number of Orders and Total Amount Ordered

SQL Stored Procedure for Supplier Orders Summary

CREATE OR REPLACE PROCEDURE GetSupplierOrdersSummary (
   p_start_date IN DATE,
    p_end_date IN DATE,
    p_cursor OUT SYS_REFCURSOR

) AS
BEGIN
    OPEN p_cursor FOR
      SELECT 
        Supplier_Name,
        Contact_Name AS Supplier_Contact_Name,
        CASE 
            WHEN LENGTH(Supplier_Contact_No_1) = 8 THEN SUBSTR(Supplier_Contact_No_1, 1, 4) || '-' || SUBSTR(Supplier_Contact_No_1, 5, 4)
            ELSE SUBSTR(Supplier_Contact_No_1, 1, 3) || '-' || SUBSTR(Supplier_Contact_No_1, 4, 4)
        END AS Supplier_Contact_No_1,
        CASE 
            WHEN LENGTH(Supplier_Contact_No_2) = 8 THEN SUBSTR(Supplier_Contact_No_2, 1, 4) || '-' || SUBSTR(Supplier_Contact_No_2, 5, 4)
            ELSE SUBSTR(Supplier_Contact_No_2, 1, 3) || '-' || SUBSTR(Supplier_Contact_No_2, 4, 4)
        END AS Supplier_Contact_No_2, 
        COUNT(o.Order_ID) AS Total_Orders,
        TO_CHAR(SUM(Order_Total_Amount), '999,999,990.00') AS Order_Total_Amount
    FROM Supplier s
    JOIN Ordertbl o ON s.Supplier_ID = o.Supplier_ID
    LEFT JOIN ( 
        SELECT  
            supplier_id,
            SUBSTR(contact_number, 1, (INSTR(contact_number, ',') - 1)) AS Supplier_Contact_No_2,
            TRIM(SUBSTR(contact_number, (INSTR(contact_number, ',') + 1))) AS Supplier_Contact_No_1
        FROM Supplier
    ) c ON s.Supplier_ID = c.supplier_id
   where order_date between p_start_date AND p_end_date
    GROUP BY Supplier_Name, Contact_Name,  CASE 
            WHEN LENGTH(Supplier_Contact_No_1) = 8 THEN SUBSTR(Supplier_Contact_No_1, 1, 4) || '-' || SUBSTR(Supplier_Contact_No_1, 5, 4)
            ELSE SUBSTR(Supplier_Contact_No_1, 1, 3) || '-' || SUBSTR(Supplier_Contact_No_1, 4, 4)
        END, CASE 
            WHEN LENGTH(Supplier_Contact_No_2) = 8 THEN SUBSTR(Supplier_Contact_No_2, 1, 4) || '-' || SUBSTR(Supplier_Contact_No_2, 5, 4)
            ELSE SUBSTR(Supplier_Contact_No_2, 1, 3) || '-' || SUBSTR(Supplier_Contact_No_2, 4, 4)
        END
    ORDER BY Supplier_Name;
END GetSupplierOrdersSummary;
/



Errors found  

- Flat file contains erroneous data. ex; supplier Digisay Co. Ltd.	contact name Berry Parker has 2 contact number; 57841266, 602801o & 57841266, 6028010. 602801o is incorrect and system treats them as separate.
Safedest Taxi Services	Steeve Narsimullu has 2 contact numbers	5874 1002, 2I7 4512 & 5874 1002, 217 4512.
Pegasus Ltd	Georges Neeroo	40, Ferney Way, Mission Road, Curepipe, Mauritius	461 5841, 5741254S

 UPDATE XXBCM_ORDER_MGT SET SUPP_CONTACT_NUMBER =  '461 5841, 57412545'  where ORDER_REF = 'PO001';
UPDATE XXBCM_ORDER_MGT SET SUPP_CONTACT_NUMBER =  '461 5841, 57412545'  where ORDER_REF = 'PO003';
UPDATE XXBCM_ORDER_MGT SET INVOICE_AMOUNT =  2500  where INVOICE_AMOUNT = '25oo'  ;
UPDATE XXBCM_ORDER_MGT SET INVOICE_AMOUNT =  1200  where INVOICE_AMOUNT = 'I200'  ;
UPDATE XXBCM_ORDER_MGT SET INVOICE_AMOUNT =  5000  where INVOICE_AMOUNT = 'S000'  ;

  UPDATE XXBCM_ORDER_MGT SET INVOICE_AMOUNT =  TO_NUMBER(REPLACE(INVOICE_AMOUNT, ',', ''))  where  INSTR(INVOICE_AMOUNT,',')<> 0  ;
  UPDATE xxbcm_order_mgt SET ORDER_TOTAL_AMOUNT = 10000 WHERE ORDER_REF = 'PO001';
  UPDATE xxbcm_order_mgt SET ORDER_TOTAL_AMOUNT = 182700 WHERE ORDER_REF = 'PO010';
  UPDATE xxbcm_order_mgt SET ORDER_TOTAL_AMOUNT = 5819625 WHERE ORDER_REF = 'PO013';

  UPDATE XXBCM_ORDER_MGT SET ORDER_LINE_AMOUNT =  TO_NUMBER(REPLACE(ORDER_LINE_AMOUNT, ',', ''))  where  INSTR(ORDER_LINE_AMOUNT,',')<> 0 and order_line_amount NOT in ('S,000','2I,000', '3,4S0');

UPDATE XXBCM_ORDER_MGT SET ORDER_LINE_AMOUNT =  100000  where ORDER_LINE_AMOUNT = '10000o'  ;
UPDATE XXBCM_ORDER_MGT SET ORDER_LINE_AMOUNT =  5000  where ORDER_LINE_AMOUNT = 'S,000'  ;
UPDATE XXBCM_ORDER_MGT SET ORDER_LINE_AMOUNT =  1200  where ORDER_LINE_AMOUNT = 'I200'  ;
UPDATE XXBCM_ORDER_MGT SET ORDER_LINE_AMOUNT =  30250  where ORDER_LINE_AMOUNT = '3025o'  ;
UPDATE XXBCM_ORDER_MGT SET ORDER_LINE_AMOUNT =  21000  where ORDER_LINE_AMOUNT = '2I,000'  ;
UPDATE XXBCM_ORDER_MGT SET ORDER_LINE_AMOUNT =  3450  where ORDER_LINE_AMOUNT = '3,4S0'  ;

update supplier set contact_number = '2420641, 57841698' where supplier_id = 2;
update supplier set contact_number = '59480015' where supplier_id = 3;
update supplier set contact_number = '52845412' where supplier_id = 4;
update supplier set contact_number = '52557435' where supplier_id = 6;
update supplier set contact_number = '57942513' where supplier_id = 7;
update supplier set contact_number = '4615841, 57412545' where supplier_id = 8;
update supplier set contact_number = '58741002, 2174512' where supplier_id = 9;
